{"ast":null,"code":"var _jsxFileName = \"/Users/hicham/Desktop/marvel/src/component/Quiz/index.js\";\nimport React, { Component } from 'react';\nimport Levels from '../Levels/index';\nimport ProgressBar from '../ProgressBar/index';\nimport { QuizMarvel } from '../QuizMarvel/index';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelName: ['debutant', 'confirme', 'expert'],\n      QuizLevel: 0,\n      maxQuestion: 10,\n      storedQuestion: [],\n      questions: '',\n      options: [],\n      idQuestion: 0,\n      btnValue: true,\n      userAnswer: null,\n      scrore: 0\n    };\n    this.storedataRef = React.createRef();\n\n    this.loadQuestion = level => {\n      const fetchArrayQuiz = QuizMarvel[0].quizz[level];\n      const lengthArray = fetchArrayQuiz.length;\n\n      if (lengthArray >= this.state.maxQuestion) {\n        this.storedataRef.current = fetchArrayQuiz;\n        const newArray = fetchArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      }\n    };\n\n    this.ValueSelected = ValueSelected => {\n      this.setState({\n        userAnswer: ValueSelected,\n        btnValue: false\n      });\n      console.log(ValueSelected);\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestion - 1) {///end\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer;\n\n      if (goodAnswer === this.state.userAnswer) {\n        this.setState(prevState => ({\n          scrore: prevState.scrore + 1\n        }));\n      }\n    };\n\n    this.welcomMsg = pseudo => {\n      console.log(pseudo);\n    };\n  }\n\n  componentDidMount() {\n    this.props.dataUser.pseudo !== '' ? this.welcomMsg(this.props.dataUser.pseudo) : null;\n    this.loadQuestion(this.state.levelName[this.state.QuizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnValue: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      options,\n      questions,\n      btnValue\n    } = this.state;\n    const displayOption = options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        onClick: () => this.ValueSelected(option),\n        className: `answerOptions ${this.state.userAnswer === option ? 'selected' : null}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }\n      }, \" \", option);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, questions), displayOption, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: btnValue,\n      onClick: this.nextQuestion,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 18\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/hicham/Desktop/marvel/src/component/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizMarvel","toast","configure","Quiz","state","levelName","QuizLevel","maxQuestion","storedQuestion","questions","options","idQuestion","btnValue","userAnswer","scrore","storedataRef","createRef","loadQuestion","level","fetchArrayQuiz","quizz","lengthArray","length","current","newArray","map","answer","keepRest","setState","ValueSelected","console","log","nextQuestion","prevState","goodAnswer","welcomMsg","pseudo","componentDidMount","props","dataUser","componentDidUpdate","prevProps","question","render","displayOption","option","index"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport Levels from '../Levels/index'\nimport ProgressBar from '../ProgressBar/index'\nimport {QuizMarvel} from '../QuizMarvel/index'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css' \ntoast.configure();\n\n\nclass Quiz extends Component {\n    state={\n       levelName:['debutant','confirme','expert'],\n       QuizLevel: 0,\n       maxQuestion: 10,\n       storedQuestion:[],\n       questions: '',\n       options: [],\n       idQuestion: 0,\n       btnValue: true,\n       userAnswer:null,\n       scrore: 0\n\n    }\n\n     storedataRef = React.createRef()\n\n    loadQuestion= level =>{\n        const fetchArrayQuiz = QuizMarvel[0].quizz[level]\n        const lengthArray = fetchArrayQuiz.length\n\n        if(lengthArray >= this.state.maxQuestion){\n\n            this.storedataRef.current = fetchArrayQuiz\n\n           const newArray = fetchArrayQuiz.map( ({answer, ...keepRest}) =>keepRest)\n            this.setState({storedQuestion : newArray})\n      \n        }\n    }   \n\n\n    ValueSelected =(ValueSelected)=>{\n        this.setState({\n            userAnswer : ValueSelected,\n            btnValue: false\n\n        })\n        console.log(ValueSelected)\n    } \n    \n    nextQuestion=()=>{\n        \n        if(this.state.idQuestion === this.state.maxQuestion - 1){ \n            ///end\n        }else{\n            this.setState(prevState =>({\n                idQuestion : prevState.idQuestion + 1 \n            }))\n        }\n        const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer\n\n        if(goodAnswer === this.state.userAnswer){\n            this.setState(prevState =>({\n                scrore : prevState.scrore + 1 \n            }))\n\n        }\n    }\n\n    welcomMsg=(pseudo)=>{\n        console.log(pseudo)\n    }\n  \n    componentDidMount(){\n        this.props.dataUser.pseudo !== '' ? this.welcomMsg(this.props.dataUser.pseudo) : null\n        this.loadQuestion(this.state.levelName[this.state.QuizLevel])\n    }\n\n    componentDidUpdate(prevProps , prevState){\n        if(this.state.storedQuestion !== prevState.storedQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n            })\n        }\n\n        if(this.state.idQuestion !== prevState.idQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n                userAnswer:null,\n                btnValue: true\n\n            })\n        }\n\n    }\n\n    \n    render(){\n\n        \n        const {options, questions, btnValue} = this.state\n\n            const displayOption = options.map( (option,index) =>{\n            return <p key={index} onClick={()=> this.ValueSelected(option)} className={`answerOptions ${this.state.userAnswer === option ? 'selected': null}`}> {option}</p> })\n\n        return (\n            <div>\n                <Levels />\n                <ProgressBar />\n                <h2>{questions}</h2>\n                {displayOption}\n                 <button disabled={btnValue} onClick={this.nextQuestion} className='btnSubmit'>Suivant</button>\n                \n            </div> \n        )    \n   \n        }\n }\nexport default Quiz\n  "]},"metadata":{},"sourceType":"module"}