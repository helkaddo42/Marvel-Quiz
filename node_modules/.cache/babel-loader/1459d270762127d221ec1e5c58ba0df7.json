{"ast":null,"code":"var _jsxFileName = \"/Users/hicham/Desktop/marvel/src/component/Quiz/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport Levels from '../Levels/index';\nimport ProgressBar from '../ProgressBar/index';\nimport QuizOver from '../QuizOver/index';\nimport { QuizMarvel } from '../QuizMarvel/index';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelName: ['debutant', 'confirme', 'expert'],\n      QuizLevel: 0,\n      maxQuestion: 10,\n      storedQuestion: [],\n      questions: '',\n      options: [],\n      idQuestion: 0,\n      btnValue: true,\n      userAnswer: null,\n      scrore: 0,\n      showWelcomeMsg: false,\n      quizend: false\n    };\n    this.storedataRef = React.createRef();\n\n    this.loadQuestion = level => {\n      const fetchArrayQuiz = QuizMarvel[0].quizz[level];\n      const lengthArray = fetchArrayQuiz.length;\n\n      if (lengthArray >= this.state.maxQuestion) {\n        this.storedataRef.current = fetchArrayQuiz;\n        const newArray = fetchArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      }\n    };\n\n    this.ValueSelected = ValueSelected => {\n      this.setState({\n        userAnswer: ValueSelected,\n        btnValue: false\n      });\n      console.log(ValueSelected);\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestion - 1) {\n        this.gameOver();\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer;\n\n      if (goodAnswer === this.state.userAnswer) {\n        this.setState(prevState => ({\n          scrore: prevState.scrore + 1\n        }));\n        toast.success('Bravo +1', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error('RatÃ© 0', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.welcomMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.gameOver = () => {\n      this.setState({\n        quizend: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelName[this.state.QuizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnValue: true\n      });\n    }\n\n    if (this.props.dataUser.pseudo) {\n      this.welcomMsg(this.props.dataUser.pseudo);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      questions,\n      btnValue\n    } = this.state;\n    const displayOption = options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        onClick: () => this.ValueSelected(option),\n        className: `answerOptions ${this.state.userAnswer === option ? 'selected' : null}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 24\n        }\n      }, \" \", option);\n    });\n    const btnText = this.state.idQuestion < this.state.maxQuestion - 1 ? \"suivant\" : \"terminer\";\n    return this.state.quizend ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedataRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: this.state.idQuestion,\n      maxQuestions: this.state.maxQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, questions), displayOption, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: btnValue,\n      onClick: this.nextQuestion,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, btnText));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/hicham/Desktop/marvel/src/component/Quiz/index.js"],"names":["React","Component","Fragment","Levels","ProgressBar","QuizOver","QuizMarvel","toast","configure","Quiz","state","levelName","QuizLevel","maxQuestion","storedQuestion","questions","options","idQuestion","btnValue","userAnswer","scrore","showWelcomeMsg","quizend","storedataRef","createRef","loadQuestion","level","fetchArrayQuiz","quizz","lengthArray","length","current","newArray","map","answer","keepRest","setState","ValueSelected","console","log","nextQuestion","gameOver","prevState","goodAnswer","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","error","welcomMsg","pseudo","warn","componentDidMount","componentDidUpdate","prevProps","question","props","dataUser","render","displayOption","option","index","btnText"],"mappings":"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","sourcesContent":["import React,{Component, Fragment} from 'react'\nimport Levels from '../Levels/index'\nimport ProgressBar from '../ProgressBar/index'\nimport QuizOver from '../QuizOver/index'\nimport {QuizMarvel} from '../QuizMarvel/index'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css' \ntoast.configure();\n\n\nclass Quiz extends Component {\n    state={\n       levelName:['debutant','confirme','expert'],\n       QuizLevel: 0,\n       maxQuestion: 10,\n       storedQuestion:[],\n       questions: '',\n       options: [],\n       idQuestion: 0,\n       btnValue: true,\n       userAnswer:null,\n       scrore: 0,\n       showWelcomeMsg: false,\n       quizend: false \n    }\n\n     storedataRef = React.createRef()\n\n    loadQuestion= level =>{\n        const fetchArrayQuiz = QuizMarvel[0].quizz[level]\n        const lengthArray = fetchArrayQuiz.length\n\n        if(lengthArray >= this.state.maxQuestion){\n\n            this.storedataRef.current = fetchArrayQuiz\n\n           const newArray = fetchArrayQuiz.map( ({answer, ...keepRest}) =>keepRest)\n            this.setState({storedQuestion : newArray})\n      \n        }\n    }   \n\n\n    ValueSelected =(ValueSelected)=>{\n        this.setState({\n            userAnswer : ValueSelected,\n            btnValue: false\n\n        })\n        console.log(ValueSelected)\n    } \n    \n    nextQuestion=()=>{\n        \n        if(this.state.idQuestion === this.state.maxQuestion - 1){ \n            this.gameOver()\n        }else{\n            this.setState(prevState =>({\n                idQuestion : prevState.idQuestion + 1 \n            }))\n        }\n        const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer\n\n        if(goodAnswer === this.state.userAnswer){\n            this.setState(prevState =>({\n                scrore : prevState.scrore + 1 \n            }))\n\n            toast.success('Bravo +1', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\" });\n\n        }else{\n            toast.error('RatÃ© 0', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\"\n            });\n        }\n    }\n\n    welcomMsg=(pseudo)=>{\n\n        if(!this.state.showWelcomeMsg){\n\n            this.setState({ showWelcomeMsg: true })\n            toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                bodyClassName: \"toastify-color-welcome\"\n            });\n        }\n    }\n  \n    gameOver=()=>{\n        this.setState({\n            quizend : true\n        })\n\n    }\n\n    componentDidMount(){\n        this.loadQuestion(this.state.levelName[this.state.QuizLevel])\n    }\n\n    componentDidUpdate(prevProps , prevState){\n        if(this.state.storedQuestion !== prevState.storedQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n            })\n        }\n\n        if(this.state.idQuestion !== prevState.idQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n                userAnswer:null,\n                btnValue: true\n\n            })\n        }\n        if(this.props.dataUser.pseudo){this.welcomMsg(this.props.dataUser.pseudo)}\n\n    }\n\n    \nrender(){\n                const {options, questions, btnValue} = this.state\n\n                const displayOption = options.map( (option,index) =>{\n                return <p key={index} onClick={()=> this.ValueSelected(option)} className={`answerOptions ${this.state.userAnswer === option ? 'selected': null}`}> {option}</p> })\n\n                const btnText = this.state.idQuestion < this.state.maxQuestion -1 ? \"suivant\" : \"terminer\"\n\n            return this.state.quizend  ? ( <QuizOver ref={this.storedataRef} /> ) :    (\n                <>\n                    <Levels />\n                    <ProgressBar idQuestion={this.state.idQuestion} maxQuestions={this.state.maxQuestion} />\n                    <h2>{questions}</h2>\n                    {displayOption}\n                    <button disabled={btnValue} onClick={this.nextQuestion} className='btnSubmit'>{btnText}</button>\n                    \n                </> \n            )    \n      \n        }\n }\nexport default Quiz\n  "]},"metadata":{},"sourceType":"module"}