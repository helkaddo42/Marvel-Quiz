{"ast":null,"code":"var _jsxFileName = \"/Users/hicham/Desktop/marvel/src/component/QuizOver/index.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { GiTrophyCup } from 'react-icons/gi';\nimport Loader from '../Loader/loader';\nimport Modal from '../Modal/index';\nimport axios from 'axios';\nconst QuizOver = React.forwardRef((props, ref) => {\n  const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY;\n  const hash = 'c15fe769e9cfc9b7538d3326c78bb9bd';\n  const {\n    levelName,\n    score,\n    maxQuestions,\n    quizLevel,\n    percent,\n    loadLevelQuestions\n  } = props;\n  const [asked, setasked] = useState([]);\n  const [openModal, setOpenModal] = useState(false);\n  const [infoCharacter, setInfoCharacter] = useState([]);\n  useEffect(() => {\n    setasked(ref.current);\n  }, [ref]);\n\n  const showModal = idHero => {\n    setOpenModal(true);\n    axios.get(`https://gateway.marvel.com/v1/public/characters/${idHero}?ts=1&apikey=${API_PUBLIC_KEY}&$hash=${hash}`).then(response => {\n      setInfoCharacter(response.data);\n    }).catch(err => console.log(err));\n  };\n\n  const hideModal = () => {\n    setOpenModal(false);\n  };\n\n  const averageGrade = maxQuestions / 2;\n\n  if (score < averageGrade) {\n    setTimeout(() => loadLevelQuestions(quizLevel), 2000);\n  }\n\n  const decision = score >= averageGrade ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, quizLevel < levelName.length ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"  \", /*#__PURE__*/React.createElement(GiTrophyCup, {\n    size: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 49\n    }\n  }), \" Bravo passer au niveau suivant!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult success\",\n    onClick: () => loadLevelQuestions(quizLevel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Niveau suivant\")) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"successMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \" Bravo, rien a dire vous etes un vrais fans!!\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btnResult success\",\n    onClick: () => loadLevelQuestions(0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \"Acceuil\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \" Reussite : \", percent, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \" Note : \", score, \"/\", maxQuestions, \" \"))) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stepsBtnContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"failureMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \" Vous avez echou\\xE9 !\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \" Reussite : \", percent, \"%\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progressPercent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \" Note : \", score, \"/\", maxQuestions, \" \")));\n  const questionAnswerd = score >= averageGrade ? asked.map(options => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: options.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, \" \", options.question), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \" \", options.answer), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btnInfo\",\n      onClick: () => showModal(options.heroId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, \" Infos \")));\n  }) : /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    colSpan: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  })));\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, decision, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"les reponses aux questions pos\\xE9es : \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"answers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  }, \"Questions\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 29\n    }\n  }, \"R\\xE9ponses\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    }\n  }, \"Infos\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, questionAnswerd))), /*#__PURE__*/React.createElement(Modal, {\n    showModal: openModal,\n    closeModal: hideModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, infoCharacter.data.results[0].name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalBody\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, \" ok\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modalFooter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"modalBtn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, \"fermer\"))));\n});\nexport default React.memo(QuizOver);","map":{"version":3,"sources":["/Users/hicham/Desktop/marvel/src/component/QuizOver/index.js"],"names":["React","Fragment","useEffect","useState","GiTrophyCup","Loader","Modal","axios","QuizOver","forwardRef","props","ref","API_PUBLIC_KEY","process","env","REACT_APP_MARVEL_API_KEY","hash","levelName","score","maxQuestions","quizLevel","percent","loadLevelQuestions","asked","setasked","openModal","setOpenModal","infoCharacter","setInfoCharacter","current","showModal","idHero","get","then","response","data","catch","err","console","log","hideModal","averageGrade","setTimeout","decision","length","questionAnswerd","map","options","id","question","answer","heroId","results","name","memo"],"mappings":"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","sourcesContent":["import React, {Fragment,useEffect,useState} from 'react'\nimport { GiTrophyCup } from 'react-icons/gi';\nimport Loader from '../Loader/loader';\nimport Modal from '../Modal/index'\nimport axios from 'axios'\n\nconst QuizOver = React.forwardRef((props, ref) => { \n\n    const API_PUBLIC_KEY = process.env.REACT_APP_MARVEL_API_KEY\n    const hash = 'c15fe769e9cfc9b7538d3326c78bb9bd'\n\n    const {\n        levelName, \n        score, \n        maxQuestions, \n        quizLevel, \n        percent,\n        loadLevelQuestions\n    } = props;\n\n    const [asked, setasked] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [infoCharacter, setInfoCharacter] = useState([])\n\n    useEffect(() => {\n        setasked(ref.current)\n      \n    }, [ref])\n\n    const showModal =(idHero)=>{\n        setOpenModal(true)\n        axios.get(`https://gateway.marvel.com/v1/public/characters/${idHero}?ts=1&apikey=${API_PUBLIC_KEY}&$hash=${hash}`)\n        .then(response =>{\n            setInfoCharacter(response.data)\n        }).catch(err =>(console.log(err)))\n    }\n\n    const hideModal =()=>{\n        setOpenModal(false)\n    }\n    \n    const averageGrade= maxQuestions / 2\n\n    if(score < averageGrade){ \n        setTimeout(()=>loadLevelQuestions(quizLevel), 2000)\n    }\n\n    const decision = score >= averageGrade ?\n    (\n        <Fragment>\n            <div className='stepsBtnContainer'> \n            {\n                quizLevel < levelName.length ?\n                (\n                    <Fragment>\n                    <p className='successMsg'>  <GiTrophyCup size='50px' /> Bravo passer au niveau suivant!</p>\n                    <button className='btnResult success'\n                            onClick={()=>loadLevelQuestions(quizLevel)} \n                    >Niveau suivant</button>\n                    </Fragment>\n\n                )\n                :\n                (\n                    <Fragment>\n                    <p className='successMsg'> Bravo, rien a dire vous etes un vrais fans!!</p>\n                    <button className='btnResult success'\n                            onClick={()=>loadLevelQuestions(0)} \n                    >Acceuil</button>\n                    </Fragment>\n\n                )\n\n            }\n            </div>\n            <div className='percentage'>\n        <div className='progressPercent'> Reussite : {percent}%</div>\n        <div className='progressPercent'> Note : {score}/{maxQuestions} </div>\n            </div>\n        </Fragment>\n\n    )\n    :\n    (\n        <Fragment>\n                <div className='stepsBtnContainer'> \n                    <p className='failureMsg'> Vous avez echoué !</p>\n                </div>\n            <div className='percentage'>\n                <div className='progressPercent'> Reussite : {percent}%</div>\n                <div className='progressPercent'> Note : {score}/{maxQuestions} </div>\n            </div>\n\n            \n        </Fragment>\n\n    )\n\n    const questionAnswerd = score >=  averageGrade ? (asked.map((options)=>{\n        return(\n            <tr key={options.id}>\n                <td> {options.question }</td>\n                <td> {options.answer }</td>\n                <td>\n                    <button className='btnInfo'\n                            onClick={()=> showModal(options.heroId)}\n                    \n                    > Infos </button>\n                </td>\n            </tr>\n        )\n    })) : \n    (\n        <tr>\n            <td colSpan='3'>\n              <Loader />\n            </td>\n        </tr>\n\n    )\n   \n\n\n    return (\n\n        <Fragment>\n           \n           {decision}\n\n            <hr />\n            <p>les reponses aux questions posées : </p>\n\n            <div className='answerContainer'>\n                <table className='answers'>\n                    <thead>\n                        <tr>\n                            <th>Questions</th>\n                            <th>Réponses</th>\n                            <th>Infos</th>\n                        </tr>\n\n                    </thead>\n                    <tbody>\n                        {questionAnswerd}\n                    </tbody>\n                </table>\n            </div>\n            <Modal showModal={openModal} closeModal={hideModal}>\n                <div className='modalHeader'>\n            <h2>{infoCharacter.data.results[0].name}</h2>\n                </div>\n                <div className='modalBody'>\n                    <h3> ok</h3>\n                </div>\n                <div className='modalFooter'>\n                    <button className='modalBtn'>fermer</button>\n                </div>\n            </Modal>\n        </Fragment>\n    )\n})\n\n\n \nexport default React.memo(QuizOver) \n"]},"metadata":{},"sourceType":"module"}