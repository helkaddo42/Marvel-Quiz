{"ast":null,"code":"var _jsxFileName = \"/Users/hicham/Desktop/marvel/src/component/Quiz/index.js\";\nimport React, { Component } from 'react';\nimport Levels from '../Levels/index';\nimport ProgressBar from '../ProgressBar/index';\nimport QuizOver from '../QuizOver/index';\nimport { QuizMarvel } from '../QuizMarvel/index';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\ntoast.configure();\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadQuestions = level => {\n      const fetchArrayQuiz = QuizMarvel[0].quizz[level];\n      const lengthArray = fetchArrayQuiz.length;\n\n      if (lengthArray >= this.state.maxQuestion) {\n        this.storedataRef.current = fetchArrayQuiz;\n        const newArray = fetchArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      }\n    };\n\n    this.ValueSelected = ValueSelected => {\n      this.setState({\n        userAnswer: ValueSelected,\n        btnValue: false\n      });\n      console.log(ValueSelected);\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion === this.state.maxQuestion - 1) {\n        this.gameOver();\n      } else {\n        this.setState(prevState => ({\n          idQuestion: prevState.idQuestion + 1\n        }));\n      }\n\n      const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer;\n\n      if (goodAnswer === this.state.userAnswer) {\n        this.setState(prevState => ({\n          scrore: prevState.scrore + 1\n        }));\n        toast.success('Bravo +1', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      } else {\n        toast.error('RatÃ© 0', {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          bodyClassName: \"toastify-color\"\n        });\n      }\n    };\n\n    this.loadLevelQuestions = levelquiz => {\n      this.setState({ ...this.initialState,\n        quizLevel: levelquiz\n      });\n      this.loadQuestions(this.state.levelName[levelquiz]);\n    };\n\n    this.welcomMsg = pseudo => {\n      if (!this.state.showWelcomeMsg) {\n        this.setState({\n          showWelcomeMsg: true\n        });\n        toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: false,\n          bodyClassName: \"toastify-color-welcome\"\n        });\n      }\n    };\n\n    this.gameOver = () => {\n      const result = this.goodAnswerPercent(this.state.maxQuestion, this.state.scrore);\n\n      if (result >= 50) {\n        this.setState({\n          QuizLevel: this.state.QuizLevel + 1,\n          percent: result,\n          quizend: true\n        });\n      } else {\n        this.setState({\n          percent: result,\n          quizend: true\n        });\n      }\n    };\n\n    this.goodAnswerPercent = (maxQuest, ourScore) => ourScore / maxQuest * 100;\n\n    this.initialState = {\n      levelName: ['debutant', 'confirme', 'expert'],\n      QuizLevel: 0,\n      maxQuestion: 10,\n      storedQuestion: [],\n      questions: '',\n      options: [],\n      idQuestion: 0,\n      btnValue: true,\n      userAnswer: null,\n      scrore: 0,\n      showWelcomeMsg: false,\n      quizend: false\n    };\n    this.state = this.initialState;\n    this.storedataRef = React.createRef();\n  }\n\n  // cycle de vie\n  componentDidMount() {\n    this.loadQuestion(this.state.levelName[this.state.QuizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n\n    if (this.state.idQuestion !== prevState.idQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options,\n        userAnswer: null,\n        btnValue: true\n      });\n    }\n\n    if (this.props.dataUser.pseudo) {\n      this.welcomMsg(this.props.dataUser.pseudo);\n    }\n  }\n\n  render() {\n    const {\n      options,\n      questions,\n      btnValue\n    } = this.state;\n    const displayOption = options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        onClick: () => this.ValueSelected(option),\n        className: `answerOptions ${this.state.userAnswer === option ? 'selected' : null}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 24\n        }\n      }, \" \", option);\n    });\n    const btnText = this.state.idQuestion < this.state.maxQuestion - 1 ? \"suivant\" : \"terminer\";\n    return this.state.quizend ? /*#__PURE__*/React.createElement(QuizOver, {\n      ref: this.storedataRef,\n      percent: this.state.percent,\n      levelName: this.state.levelName,\n      score: this.state.scrore,\n      maxQuestions: this.state.maxQuestion,\n      quizLevel: this.state.QuizLevel,\n      loadLevelQuestions: this.loadLevelQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      idQuestion: this.state.idQuestion,\n      maxQuestions: this.state.maxQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }, questions), displayOption, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: btnValue,\n      onClick: this.nextQuestion,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }, btnText));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/hicham/Desktop/marvel/src/component/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizOver","QuizMarvel","toast","configure","Quiz","constructor","props","loadQuestions","level","fetchArrayQuiz","quizz","lengthArray","length","state","maxQuestion","storedataRef","current","newArray","map","answer","keepRest","setState","storedQuestion","ValueSelected","userAnswer","btnValue","console","log","nextQuestion","idQuestion","gameOver","prevState","goodAnswer","scrore","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","bodyClassName","error","loadLevelQuestions","levelquiz","initialState","quizLevel","levelName","welcomMsg","pseudo","showWelcomeMsg","warn","result","goodAnswerPercent","QuizLevel","percent","quizend","maxQuest","ourScore","questions","options","createRef","componentDidMount","loadQuestion","componentDidUpdate","prevProps","question","dataUser","render","displayOption","option","index","btnText"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport Levels from '../Levels/index'\nimport ProgressBar from '../ProgressBar/index'\nimport QuizOver from '../QuizOver/index'\nimport {QuizMarvel} from '../QuizMarvel/index'\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css' \ntoast.configure();\n\n\nclass Quiz extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.initialState = {\n            levelName:['debutant','confirme','expert'],\n            QuizLevel: 0,\n            maxQuestion: 10,\n            storedQuestion:[],\n            questions: '',\n            options: [],\n            idQuestion: 0,\n            btnValue: true,\n            userAnswer:null,\n            scrore: 0,\n            showWelcomeMsg: false,\n            quizend: false \n             \n        }\n        this.state = this.initialState;\n        this.storedataRef = React.createRef()\n\n    }\n    \n    loadQuestions= level =>{\n        const fetchArrayQuiz = QuizMarvel[0].quizz[level]\n        const lengthArray = fetchArrayQuiz.length\n\n        if(lengthArray >= this.state.maxQuestion){\n\n            this.storedataRef.current = fetchArrayQuiz\n\n           const newArray = fetchArrayQuiz.map( ({answer, ...keepRest}) =>keepRest)\n            this.setState({storedQuestion : newArray})\n      \n        }\n    }   \n                //handler//\n    ValueSelected =(ValueSelected)=>{\n        this.setState({\n            userAnswer : ValueSelected,\n            btnValue: false\n\n        })\n        console.log(ValueSelected)\n    } \n                //handler//\n    nextQuestion=()=>{\n        \n        if(this.state.idQuestion === this.state.maxQuestion - 1){ \n            this.gameOver()\n        }else{\n            this.setState(prevState =>({\n                idQuestion : prevState.idQuestion + 1 \n            }))\n        }\n        const goodAnswer = this.storedataRef.current[this.state.idQuestion].answer\n\n        if(goodAnswer === this.state.userAnswer){\n            this.setState(prevState =>({\n                scrore : prevState.scrore + 1 \n            }))\n\n            toast.success('Bravo +1', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\" });\n\n        }else{\n            toast.error('RatÃ© 0', {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                bodyClassName: \"toastify-color\"\n            });\n        }\n    }\n                //handler//\n    loadLevelQuestions =(levelquiz)=>{\n      this.setState({...this.initialState, quizLevel : levelquiz})\n      this.loadQuestions(this.state.levelName[levelquiz])\n\n\n    }\n\n                //handler//\n    welcomMsg=(pseudo)=>{\n\n        if(!this.state.showWelcomeMsg){\n\n            this.setState({ showWelcomeMsg: true })\n            toast.warn(`Bienvenue ${pseudo}, et bonne chance!`, {\n                position: \"top-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                bodyClassName: \"toastify-color-welcome\"\n            });\n        }\n    }\n\n\n                //handler//\n    gameOver=()=>{\n\n      const result =  this.goodAnswerPercent(this.state.maxQuestion, this.state.scrore)\n\n      if(result >= 50){\n        this.setState({\n            QuizLevel : this.state.QuizLevel + 1,\n            percent : result,\n            quizend : true \n        })\n      }else{\n        this.setState({\n            percent : result,\n            quizend : true \n        })\n      }\n    \n        \n\n    }\n\n    goodAnswerPercent = (maxQuest,ourScore)=>(ourScore / maxQuest) * 100\n\n                        // cycle de vie\n    componentDidMount(){\n        this.loadQuestion(this.state.levelName[this.state.QuizLevel])\n    }\n\n    componentDidUpdate(prevProps , prevState){\n        if(this.state.storedQuestion !== prevState.storedQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n            })\n        }\n\n        if(this.state.idQuestion !== prevState.idQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n                userAnswer:null,\n                btnValue: true\n\n            })\n        }\n        if(this.props.dataUser.pseudo){this.welcomMsg(this.props.dataUser.pseudo)}\n\n    }\n\n    \nrender(){\n                const {options, questions, btnValue} = this.state\n\n                const displayOption = options.map( (option,index) =>{\n                return <p key={index} onClick={()=> this.ValueSelected(option)} className={`answerOptions ${this.state.userAnswer === option ? 'selected': null}`}> {option}</p> })\n\n                const btnText = this.state.idQuestion < this.state.maxQuestion -1 ? \"suivant\" : \"terminer\"\n\n            return this.state.quizend  ? ( <QuizOver \n                    ref={this.storedataRef}\n                    percent={this.state.percent}\n                    levelName={this.state.levelName}\n                    score={this.state.scrore} \n                    maxQuestions={this.state.maxQuestion}\n                    quizLevel={this.state.QuizLevel}\n                    loadLevelQuestions={this.loadLevelQuestions}/> )\n                     : (\n                <>\n                    <Levels />\n                    <ProgressBar idQuestion={this.state.idQuestion} maxQuestions={this.state.maxQuestion} />\n                    <h2>{questions}</h2>\n                    {displayOption}\n                    <button disabled={btnValue} onClick={this.nextQuestion} className='btnSubmit'>{btnText}</button>\n                    \n                </> \n            )    \n      \n        }\n }\nexport default Quiz\n  "]},"metadata":{},"sourceType":"module"}