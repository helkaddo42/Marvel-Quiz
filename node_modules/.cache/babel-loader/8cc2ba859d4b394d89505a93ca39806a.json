{"ast":null,"code":"var _jsxFileName = \"/Users/hicham/Desktop/marvel/src/component/Quiz/index.js\";\nimport React, { Component } from 'react';\nimport Levels from '../Levels/index';\nimport ProgressBar from '../ProgressBar/index';\nimport { QuizMarvel } from '../QuizMarvel/index';\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      levelName: ['debutant', 'confirme', 'expert'],\n      QuizLevel: 0,\n      maxQuestion: 10,\n      storedQuestion: [],\n      questions: '',\n      options: [],\n      idQuestion: 0,\n      btnValue: true,\n      userAnswer: null\n    };\n\n    this.loadQuestion = level => {\n      const fetchArrayQuiz = QuizMarvel[0].quizz[level];\n      const lengthArray = fetchArrayQuiz.length;\n\n      if (lengthArray >= this.state.maxQuestion) {\n        const newArray = fetchArrayQuiz.map(({\n          answer,\n          ...keepRest\n        }) => keepRest);\n        this.setState({\n          storedQuestion: newArray\n        });\n      }\n    };\n\n    this.ValueSelected = ValueSelected => {\n      this.setState({\n        userAnswer: ValueSelected\n      });\n      console.log(ValueSelected);\n    };\n\n    this.nextQuestion = () => {\n      if (this.state.idQuestion <= maxQuestion) {\n        this.setState(prevState => {\n          return {\n            idQuestion: prevState + 1\n          };\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadQuestion(this.state.levelName[this.state.QuizLevel]);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.storedQuestion !== prevState.storedQuestion) {\n      this.setState({\n        questions: this.state.storedQuestion[this.state.idQuestion].question,\n        options: this.state.storedQuestion[this.state.idQuestion].options\n      });\n    }\n  }\n\n  render() {\n    const {\n      options,\n      questions,\n      btnValue\n    } = this.state;\n    const displayOption = options.map((option, index) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: index,\n        onClick: () => this.ValueSelected(option),\n        className: `answerOptions ${this.state.userAnswer === option ? 'selected' : null}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 20\n        }\n      }, \" \", option);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Levels, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ProgressBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, questions), displayOption, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: btnValue,\n      onClick: this.nextQuestion,\n      className: \"btnSubmit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 18\n      }\n    }, \"Suivant\"));\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/hicham/Desktop/marvel/src/component/Quiz/index.js"],"names":["React","Component","Levels","ProgressBar","QuizMarvel","Quiz","state","levelName","QuizLevel","maxQuestion","storedQuestion","questions","options","idQuestion","btnValue","userAnswer","loadQuestion","level","fetchArrayQuiz","quizz","lengthArray","length","newArray","map","answer","keepRest","setState","ValueSelected","console","log","nextQuestion","prevState","componentDidMount","componentDidUpdate","prevProps","question","render","displayOption","option","index"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport Levels from '../Levels/index'\nimport ProgressBar from '../ProgressBar/index'\nimport {QuizMarvel} from '../QuizMarvel/index'\n\nclass Quiz extends Component {\n    \n    state={\n       levelName:['debutant','confirme','expert'],\n       QuizLevel: 0,\n       maxQuestion: 10,\n       storedQuestion:[],\n       questions: '',\n       options: [],\n       idQuestion: 0,\n       btnValue: true,\n       userAnswer:null,\n\n    }\n\n    loadQuestion= level =>{\n        const fetchArrayQuiz = QuizMarvel[0].quizz[level]\n        const lengthArray = fetchArrayQuiz.length\n\n        if(lengthArray >= this.state.maxQuestion){\n\n           const newArray = fetchArrayQuiz.map( ({answer, ...keepRest}) =>keepRest)\n            this.setState({storedQuestion : newArray})\n      \n        }\n    }  \n\n    ValueSelected =(ValueSelected)=>{\n        this.setState({\n            userAnswer : ValueSelected\n        })\n        console.log(ValueSelected)\n    }\n    \n    nextQuestion=()=>{\n        \n        if(this.state.idQuestion <= maxQuestion){\n            this.setState(prevState =>{\n                return({\n                    idQuestion : prevState + 1\n                })\n            })\n        }\n       \n    \n    }\n\n    componentDidMount(){\n        this.loadQuestion(this.state.levelName[this.state.QuizLevel])\n    }\n\n    componentDidUpdate(prevProps , prevState){\n        if(this.state.storedQuestion !== prevState.storedQuestion){\n            this.setState({\n                questions : this.state.storedQuestion[this.state.idQuestion].question,\n                options : this.state.storedQuestion[this.state.idQuestion].options,\n            })\n        }\n    }\n\n    \n    render(){\n\n        const {options, questions, btnValue} = this.state\n\n            const displayOption = options.map( (option,index) =>{\n            return <p key={index} onClick={()=> this.ValueSelected(option)} className={`answerOptions ${this.state.userAnswer === option ? 'selected': null}`}> {option}</p> })\n\n        return (\n            <div>\n                <Levels />\n                <ProgressBar />\n                <h2>{questions}</h2>\n                {displayOption}\n                 <button disabled={btnValue} onClick={this.nextQuestion} className='btnSubmit'>Suivant</button>\n                \n            </div> \n        )    \n   \n        }\n }\nexport default Quiz\n  "]},"metadata":{},"sourceType":"module"}